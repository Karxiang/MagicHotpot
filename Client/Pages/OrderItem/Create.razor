@page "/orderitems/create"
@inject HttpClient _client
@inject NavigationManager _navManager


<h3 class="card-title">Create New OrderItem</h3>
<hr />
<br />

<EditForm Model="@orderitem" OnValidSubmit="CreateOrderItem">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Food: </label>
        <div>
            <InputSelect @bind-Value="orderitem.FoodID" class="form-control">
                <option value="">-- Select Food --</option>
                @if (Foods != null)
                {
                    foreach (var food in Foods)
                    {
                        <option value="@food.Id">@food.FoodName</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(()=> orderitem.FoodID)" />
        </div>
    </div>

    <div class="form-group">
        <label>Order Quantity: </label>
        <div>
            <InputNumber @bind-Value="@orderitem.OrderQty" class="form-control" />
            <ValidationMessage For="@(() => orderitem.OrderQty)" />
        </div>
    </div>

    <div class="form-group">
        <label>BookingID: </label>
        <div>
            <InputSelect @bind-Value="orderitem.BookID" class="form-control">
                <option value="">-- Select BookingID --</option>
                @if (Bookings != null)
                {
                    foreach (var booking in Bookings)
                    {
                        <option value="@booking.Id">@booking.Id</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(()=> orderitem.BookID)" />
        </div>
    </div>

    <br />
    <br />

    <button type="submit" class="btn btn-success btn-block">
        Create OrderItem
    </button>
</EditForm>

@code {
    // do for Booking, Customer, OrderItem and Review
    OrderItem orderitem = new OrderItem();

    private IList<Food>? Foods;
    private IList<Booking>? Bookings;

    protected async override Task OnInitializedAsync()
    {
        Foods = await _client.GetFromJsonAsync<List<Food>>($"{Endpoints.FoodsEndpoint}");
        Bookings = await _client.GetFromJsonAsync<List<Booking>>($"{Endpoints.BookingsEndpoint}");
    }

    private async Task CreateOrderItem()
    {
        await _client.PostAsJsonAsync(Endpoints.OrderItemsEndpoint, orderitem);
        _navManager.NavigateTo("/orderItems/");
    }

}