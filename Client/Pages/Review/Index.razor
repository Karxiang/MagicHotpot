@page "/reviews/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@implements IDisposable
@inject HttpInterceptorService _interceptor


<h3 class"card-title">Reviews</h3>
<br />

<a href="/reviews/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Review
</a>

@if (Reviews == null)
{
    <div class="alert alert-info">Loading Reviews...</div>
}
else
{
    <table class="table table-responsive" id="reviewsTable">
        <thead>
            <tr>
                    <th>Review ID</th>
                    <th>Review Rating</th>
                    <th>Review Description</th>
                    <th>CustID</th>
                    <th>BookID</th>
                    <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var review in Reviews)
            {
                <tr>
                    <td>@review.Id</td>
                    <td>@review.ReviewRating</td>
                    <td>@review.ReviewDescription</td>
                    <td>@review.CustomerId</td>
                    <td>@review.BookingId</td>
                    <td>
                        <a href="/reviews/view/@review.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>

                        <a href="/reviews/edit/@review.Id" class="btn btn-primary">
                            <span class="oi oi-pencil"></span>
                        </a>

                        <button class="btn btn-primary" @onclick="@(()=>Delete(review.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}





@code {
    private List<Review>? Reviews;

    protected async override Task OnInitializedAsync()
    {
        Reviews = await _client.GetFromJsonAsync<List<Review>>($"{Endpoints.ReviewsEndpoint}");
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("AddDataTable", "#reviewsTable");
    }

    public void Dispose()
    {
        js.InvokeVoidAsync("DataTablesDispose", "#reviewsTable");
        _interceptor.DisposeEvent();
    }

    async Task Delete(int reviewId)
    {
        if (Reviews != null)
        {
            var review = Reviews.First(q => q.Id == reviewId);
            var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {review.Id}?");
            if (confirm)
            {
                await _client.DeleteAsync($"{Endpoints.ReviewsEndpoint}/{reviewId}");
                await OnInitializedAsync();
            }
        }
    }

}