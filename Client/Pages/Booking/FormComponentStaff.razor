@inject HttpClient _client

<EditForm Model="@booking" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled ="@Disabled">
        <div class="form-group">
            <label>Branch: </label>
            <div>
                <InputSelect @bind-Value="booking.BranchId" class="form-control">
                    <option value="">-- Select Branch --</option>
                    @if (Branches != null)
                    {
                        foreach (var branch in Branches)
                        {
                            <option value="@branch.Id">@branch.BranchName</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(()=>booking.BranchId)" />
            </div>
        </div>

        <div class="form-group">
            <label>Party Size: </label>
            <div>
                <InputNumber @bind-Value="@booking.BookPartySize" class="form-control" />
                <ValidationMessage For="@(() => booking.BookPartySize)" />
            </div>
        </div>

        <div class="form-group">
            <label>Dining Type: </label>
            <div>
                <InputText @bind-Value="@booking.BookDiningType" class="form-control" />
                <ValidationMessage For="@(() => booking.BookDiningType)" />
            </div>
        </div>

        <div class="form-group">
            <label>Additional Note: </label>
            <div>
                <InputText @bind-Value="@booking.BookAddNote" class="form-control" />
                <ValidationMessage For="@(() => booking.BookAddNote)" />
            </div>
        </div>

        <div class="form-group">
            <label>Customer: </label>
            <div>
                <InputSelect @bind-Value="booking.CustomerId" class="form-control">
                    <option value="">-- Select Customer --</option>
                    @if (Customers != null)
                    {
                        foreach (var customer in Customers)
                        {
                            <option value="@customer.Id">@customer.CustomerName</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(()=>booking.CustomerId)" />
            </div>
        </div>


        <div class="form-group">
            <label>Book Date: </label>
            <div>
                @* <InputDate @bind-Value="@booking.BookDate" class="form-control" /> *@
                <InputDate Type="InputDateType.Date" min="@DateTime.Today.ToString("yyyy-MM-dd")" class="form-control" @bind-Value="@booking.BookDate" />
                <ValidationMessage For="@(() => booking.BookDate)" />
            </div>
        </div>


        <div class="form-group">
            <label>Book Time: </label>
            <div>
                <InputDate Type="InputDateType.Time" min="@DateTime.Today.ToString("yyyy-MM-dd")" class="form-control" @bind-Value="@booking.BookTime" />
                <ValidationMessage For="@(() => booking.BookTime)" />
            </div>
        </div>

        

@*         <div class="form-group">
            <label>Book Date: </label>
            <div>
                <InputDate @bind-Value="@booking.BookDate" class="form-control" />
                <ValidationMessage For="@(() => booking.BookDate)" />
            </div>
        </div> *@

        <div class="form-group">
            <label>Staff: </label>
            <div>
                <InputSelect @bind-Value="booking.StaffId" class="form-control">
                    <option value="">-- Select Staff --</option>
                    @if (Staffs != null)
                    {
                        foreach (var staff in Staffs.Where(c => c.BranchId == c.Branch.Id))
                        {
                            <option value="@staff.Id">@staff.StaffName</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(()=>booking.StaffId)" />
            </div>
            </div>
    </fieldset>
    <br />
    <br />
    @if (!Disabled)
        {
            <button type="submit" class="btn btn-success btn-block">
                @ButtonText
            </button>
        }
    <BackToList Target="bookings/staff"/>
</EditForm>
@code {
    [Parameter] public Booking? booking { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    [Parameter] public bool Disabled { get; set; } = false;


    private IList<Branch>? Branches;
    private IList<Customer>? Customers;
    private IList<Staff>? Staffs;

    protected async override Task OnInitializedAsync()
    {
        Branches = await _client.GetFromJsonAsync<List<Branch>>($"{Endpoints.BranchesEndpoint}");
        Customers = await _client.GetFromJsonAsync<List<Customer>>($"{Endpoints.CustomersEndpoint}");
        Staffs = await _client.GetFromJsonAsync<List<Staff>>($"{Endpoints.StaffsEndpoint}");

    }
}