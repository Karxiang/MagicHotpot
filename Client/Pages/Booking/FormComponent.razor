@inject HttpClient _client

<EditForm Model="@booking" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Branch: </label>
        <div>
            <InputSelect @bind-Value="booking.BranchId" class="form-control">
                <option value="">-- Select Branch --</option>
                @if (Branches != null)
                {
                    foreach (var branch in Branches)
                    {
                        <option value="@branch.Id">@branch.BranchName</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(()=>booking.BranchId)" />
        </div>
    </div>

    <div class="form-group">
        <label>Party Size: </label>
        <div>
            <InputNumber @bind-Value="@booking.BookPartySize" class="form-control" />
            <ValidationMessage For="@(() => booking.BookPartySize)" />
        </div>
    </div>

    <div class="form-group">
        <label>Dining Type: </label>
        <div>
            <InputText @bind-Value="@booking.BookDiningType" class="form-control" />
            <ValidationMessage For="@(() => booking.BookDiningType)" />
        </div>
    </div>

    <div class="form-group">
        <label>Additional Note: </label>
        <div>
            <InputText @bind-Value="@booking.BookAddNote" class="form-control" />
            <ValidationMessage For="@(() => booking.BookAddNote)" />
        </div>
    </div>

    <div class="form-group">
        <label>Customer: </label>
        <div>
            <InputSelect @bind-Value="booking.CustomerId" class="form-control">
                <option value="">-- Select Customer --</option>
                @if (Customers != null)
                {
                    foreach (var customer in Customers)
                    {
                        <option value="@customer.Id">@customer.CustomerName</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(()=>booking.CustomerId)" />
        </div>
    </div>

    <div class="form-group">
        <label>Book Date: </label>
        <div>
            <InputDate @bind-Value="@booking.BookDate" class="form-control" />
            <ValidationMessage For="@(() => booking.BookDate)" />
        </div>
    </div>

    <div class="form-group">
        <label>Staff: </label>
        <div>
            <InputSelect @bind-Value="booking.StaffId" class="form-control">
                <option value="">-- Select Staff --</option>
                @if (Staffs != null)
                {
                    foreach (var staff in Staffs)
                    {
                        <option value="@staff.Id">@staff.StaffName</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(()=>booking.StaffId)" />
        </div>
    </div>

    <br />
    <br />

    <button type="submit" class="btn btn-success btn-block">
        @ButtonText
    </button>
    <BackToList Target="bookings"/>
</EditForm>
@code {
    [Parameter] public Booking? booking { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<Branch>? Branches;
    private IList<Customer>? Customers;
    private IList<Staff>? Staffs;

    protected async override Task OnInitializedAsync()
    {
        Branches = await _client.GetFromJsonAsync<List<Branch>>($"{Endpoints.BranchesEndpoint}");
        Customers = await _client.GetFromJsonAsync<List<Customer>>($"{Endpoints.CustomersEndpoint}");
        Staffs = await _client.GetFromJsonAsync<List<Staff>>($"{Endpoints.StaffsEndpoint}");
    }
}