@inject HttpClient _client

<EditForm Model="@staff" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
        <fieldset disabled ="@Disabled">

    <div class="form-group">
        <label>Ic Number: </label>
        <div>
            <InputText @bind-Value="@staff.StaffIcNo" class="form-control" />
            <ValidationMessage For="@(() => staff.StaffIcNo)" />
        </div>
    </div>

    <div class="form-group">
        <label>Name: </label>
        <div>
            <InputText @bind-Value="@staff.StaffName" class="form-control" />
            <ValidationMessage For="@(() => staff.StaffName)" />
        </div>
    </div>

    <div class="form-group">
        <label>Position: </label>
        <div>
            <InputText @bind-Value="@staff.StaffPostion" class="form-control" />
            <ValidationMessage For="@(() => staff.StaffPostion)" />
        </div>
    </div>

    <div class="form-group">
        <label>Phone Number: </label>
        <div>
            <InputNumber @bind-Value="@staff.StaffPhoneNo" class="form-control" />
            <ValidationMessage For="@(() => staff.StaffPhoneNo)" />
        </div>
    </div>

    <div class="form-group">
        <label>Date Of Birth: </label>
        <div>
            <InputDate @bind-Value="@staff.StaffDOB" class="form-control" />
            <ValidationMessage For="@(() => staff.StaffDOB)" />
        </div>
    </div>

    <div class="form-group">
        <label>Branch: </label>
        <div>
            <InputSelect @bind-Value="staff.BranchId" class="form-control">
                <option value="">-- Select Branch --</option>
                @if (Branches != null)
                {
                    foreach (var branch in Branches)
                    {
                        <option value="@branch.Id">@branch.BranchName</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(()=> staff.BranchId)" />
        </div>
    </div>
    </fieldset>
    <br />
    <br />
        @if (!Disabled)
        {
            <button type="submit" class="btn btn-success btn-block">
                @ButtonText
            </button>
        }
        <BackToList Target="staffs" />
</EditForm>

@code {
    [Parameter] public Staff? staff { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    [Parameter] public bool Disabled { get; set; } = false;


    private IList<Branch>? Branches;

    protected async override Task OnInitializedAsync()
    {
        Branches = await _client.GetFromJsonAsync<List<Branch>>($"{Endpoints.BranchesEndpoint}");
    }
}